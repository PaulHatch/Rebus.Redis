name: Build and Deploy

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version (optional)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.format_version.outputs.version }}
      preview_version: ${{ steps.format_version.outputs.preview_version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false
          search_commit_body: false
          user_format_type: "csv"
      
      - name: Format Versions
        id: format_version
        env:
          BASE_VERSION: ${{ steps.version.outputs.version }}
          INCREMENT: ${{ steps.version.outputs.increment }}
          MAJOR: ${{ steps.version.outputs.major }}
          MINOR: ${{ steps.version.outputs.minor }}
          PATCH: ${{ steps.version.outputs.patch }}
        run: |
          # Assembly version for .NET (4-part version)
          ASSEMBLY_VERSION="${MAJOR}.${MINOR}.${PATCH}.${INCREMENT}"
          echo "assembly_version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
          
          # Package versions
          echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
          
          # Preview version includes the increment as a preview suffix
          PREVIEW_VERSION="${BASE_VERSION}-preview$(printf '%02d' $INCREMENT)"
          echo "preview_version=$PREVIEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Assembly version: $ASSEMBLY_VERSION"
          echo "Release version: $BASE_VERSION"
          echo "Preview version: $PREVIEW_VERSION"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore -p:Version=${{ steps.format_version.outputs.assembly_version }}

      - name: Test
        run: dotnet test -c Release --no-build --verbosity normal

      - name: Create NuGet Packages
        env:
          ASSEMBLY_VERSION: ${{ steps.format_version.outputs.assembly_version }}
          RELEASE_VERSION: ${{ steps.format_version.outputs.version }}
          PREVIEW_VERSION: ${{ steps.format_version.outputs.preview_version }}
        run: |
          echo "Building release package with version: $RELEASE_VERSION (assembly: $ASSEMBLY_VERSION)"
          dotnet pack -c Release -p:Version=$ASSEMBLY_VERSION -p:PackageVersion=$RELEASE_VERSION --no-build --output ./artifacts/release
          
          echo "Building preview package with version: $PREVIEW_VERSION (assembly: $ASSEMBLY_VERSION)"
          dotnet pack -c Release -p:Version=$ASSEMBLY_VERSION -p:PackageVersion=$PREVIEW_VERSION --no-build --output ./artifacts/preview
        
      - name: Upload Preview Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-preview
          path: ./artifacts/preview/*.nupkg
          retention-days: 14
      
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-release
          path: ./artifacts/release/*.nupkg
          retention-days: 14

  deploy-preview:
    name: Deploy Preview (${{ needs.build.outputs.preview_version }})
    needs: build
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages-preview
          path: ./artifacts

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Add GitHub Package Source
        run: |
          dotnet nuget add source \
            --username ${{ github.repository_owner }} \
            --password ${{ secrets.GITHUB_TOKEN }} \
            --store-password-in-clear-text \
            --name github \
            "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Publish to GitHub Packages
        run: |
          for package in ./artifacts/*.nupkg; do
            echo "Publishing $package to GitHub Packages"
            dotnet nuget push "$package" --source github --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
          done

  deploy-release:
    name: Deploy to NuGet (${{ needs.build.outputs.version }})
    needs: build
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages-release
          path: ./artifacts

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish to NuGet.org
        run: |
          for package in ./artifacts/*.nupkg; do
            echo "Publishing $package to NuGet.org"
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done

      - name: Create Git Tag
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          TAG="v$VERSION"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation"
          else
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag -a "$TAG" -m "Release version $VERSION"
            git push origin "$TAG"
            echo "Created and pushed tag: $TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body: |
            ## Release ${{ needs.build.outputs.version }}
            
            ### Changes
            View commits since last release: [Changelog](https://github.com/${{ github.repository }}/compare/...v${{ needs.build.outputs.version }})
            
            ### NuGet Package
            Available on [NuGet.org](https://www.nuget.org/packages/Rebus.Redis/${{ needs.build.outputs.version }})
          draft: false
          prerelease: false
          files: ./artifacts/*.nupkg
          generate_release_notes: true